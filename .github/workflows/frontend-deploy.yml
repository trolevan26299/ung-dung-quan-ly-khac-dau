name: Frontend Production Deploy

on:
  push:
    branches:
      - production
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
      - 'docker-compose.prod.yml'

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: khac-dau-tt-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            REACT_APP_ENV=production

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Navigate to project directory
            cd ${{ secrets.VPS_PROJECT_PATH }}
            
            # Pull latest code
            git pull origin production
            
            # Set environment variables
            export FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:production
            export MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
            export MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
            export MONGO_DATABASE=${{ secrets.MONGO_DATABASE }}
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Pull latest frontend image
            docker pull $FRONTEND_IMAGE
            
            # Stop and remove old frontend container
            docker-compose -f docker-compose.prod.yml stop frontend || true
            docker-compose -f docker-compose.prod.yml rm -f frontend || true
            
            # Start updated frontend service
            docker-compose -f docker-compose.prod.yml up -d frontend
            
            # Wait for health check
            echo "Waiting for frontend to be healthy..."
            timeout 300 bash -c 'until docker-compose -f docker-compose.prod.yml ps frontend | grep -q "healthy"; do sleep 5; done'
            
            # Clean up old images
            docker image prune -f
            
            echo "Frontend deployment completed successfully!"

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Frontend deployment ${{ job.status }}!
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 